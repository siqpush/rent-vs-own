use leptos::logging;
use serde::Serialize;
#[derive(Clone, Copy, Serialize, Debug)]
pub enum Opts {
    Int(u8),
    Float(f32),
}

impl Opts {
    pub fn get_int(&self) -> u8 {
        match self {
            Opts::Int(x) => *x,
            Opts::Float(_x) => panic!("Can not convert Opt::Float to Opt::Int"),
        }
    }

    pub fn get_float(&self) -> f32 {
        match self {
            Opts::Int(_x) => panic!("Can not convert Opt::Int to Opt::Float"),
            Opts::Float(x) => *x,
        }
    }

    pub fn get_float_ref(&self) -> &f32 {
        match self {
            Opts::Int(_x) => panic!("Can not convert Opt::Int to Opt::Float"),
            Opts::Float(x) => x,
        }
    }

    pub fn opt_from_u8_str(s: &str) -> Self {
        Opts::Int(s.parse::<u8>().unwrap_or_else(|s| {
            logging::error!("Error parsing string to u8: {}", s);
            panic!("Error parsing string to u8")
        }))
    }

    pub fn opt_from_f32_str(s: &str) -> Self {
        Opts::Float(s.parse::<f32>().unwrap_or_else(|s| {
            logging::error!("Error parsing string to f32: {}", s);
            panic!("Error parsing string to f32")
        }))
    }
}

#[derive(Clone, Copy, Serialize, Debug)]
pub enum OptType {
    Int,
    Float,
}

macro_rules! convert_to_int_opts {
    ( $( $x:expr ),* ) => {
        [
            $( Opts::Int($x) ),*
        ]
    };
}

macro_rules! convert_to_float_opts {
    ( $( $x:expr ),* ) => {
        [
            $( Opts::Float($x) ),*
        ]
    };
}

macro_rules! convert_to_floats {
    ( $( $x:expr ),* ) => {
        [
            $( $x as f32 ),*
        ]
    };
}

pub const DEATH: usize = 100;
pub const AGE_RANGE: [Opts; DEATH] = convert_to_int_opts![
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
    50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
    74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
    98, 99
];

pub const AGE_RANGE_FLOATS: [f32; 100] = convert_to_floats![
    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
    26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
    50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
    74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97,
    98, 99
];

pub const MORTGAGE_RATES: [Opts; DEATH] = convert_to_float_opts![
    0.0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.010, 0.011, 0.012, 0.013, 0.014,
    0.015, 0.016, 0.017, 0.018, 0.019, 0.020, 0.021, 0.022, 0.023, 0.024, 0.025, 0.026, 0.027,
    0.028, 0.029, 0.030, 0.031, 0.032, 0.033, 0.034, 0.035, 0.036, 0.037, 0.038, 0.039, 0.040,
    0.041, 0.042, 0.043, 0.044, 0.045, 0.046, 0.047, 0.048, 0.049, 0.050, 0.051, 0.052, 0.053,
    0.054, 0.055, 0.056, 0.057, 0.058, 0.059, 0.060, 0.061, 0.062, 0.063, 0.064, 0.065, 0.066,
    0.067, 0.068, 0.069, 0.070, 0.071, 0.072, 0.073, 0.074, 0.075, 0.076, 0.077, 0.078, 0.079,
    0.080, 0.081, 0.082, 0.083, 0.084, 0.085, 0.086, 0.087, 0.088, 0.089, 0.090, 0.091, 0.092,
    0.093, 0.094, 0.095, 0.096, 0.097, 0.098, 0.099
];

pub const INCEXP_RANGE: [Opts; DEATH] = convert_to_float_opts![
    0.0, 100.0, 250.0, 500.0, 1000.0, 1500.0, 2000.0, 2500.0, 3000.0, 3500.0, 4000.0, 4500.0,
    5000.0, 5500.0, 6000.0, 6500.0, 7000.0, 7500.0, 8000.0, 8500.0, 9000.0, 9500.0, 10000.0,
    10500.0, 11000.0, 11500.0, 12000.0, 12500.0, 13000.0, 13500.0, 14000.0, 14500.0, 15000.0,
    15500.0, 16000.0, 16500.0, 17000.0, 17500.0, 18000.0, 18500.0, 19000.0, 19500.0, 20000.0,
    21000.0, 22000.0, 23000.0, 24000.0, 25000.0, 26000.0, 27000.0, 28000.0, 29000.0, 30000.0,
    35000.0, 40000.0, 45000.0, 50000.0, 55000.0, 60000.0, 65000.0, 70000.0, 75000.0, 80000.0,
    85000.0, 90000.0, 92500.0, 95000.0, 97500.0, 100000.0, 105000.0, 110000.0, 120000.0, 130000.0,
    140000.0, 150000.0, 160000.0, 170000.0, 180000.0, 190000.0, 200000.0, 225000.0, 250000.0,
    275000.0, 300000.0, 325000.0, 350000.0, 375000.0, 400000.0, 450000.0, 500000.0, 550000.0,
    600000.0, 650000.0, 700000.0, 750000.0, 800000.0, 850000.0, 900000.0, 950000.0, 1000000.0
];

pub const NETWORTH_RANGE: [Opts; DEATH] = convert_to_float_opts![
    0.0, 5000.0, 10000.0, 15000.0, 20000.0, 25000.0, 30000.0, 35000.0, 40000.0, 45000.0, 50000.0,
    55000.0, 60000.0, 65000.0, 70000.0, 75000.0, 80000.0, 85000.0, 90000.0, 100000.0, 110000.0,
    120000.0, 130000.0, 140000.0, 150000.0, 160000.0, 170000.0, 180000.0, 190000.0, 200000.0,
    210000.0, 220000.0, 230000.0, 240000.0, 250000.0, 260000.0, 270000.0, 280000.0, 290000.0,
    300000.0, 310000.0, 320000.0, 330000.0, 340000.0, 350000.0, 360000.0, 370000.0, 380000.0,
    390000.0, 400000.0, 410000.0, 420000.0, 430000.0, 440000.0, 450000.0, 460000.0, 470000.0,
    480000.0, 490000.0, 500000.0, 550000.0, 600000.0, 650000.0, 700000.0, 750000.0, 800000.0,
    850000.0, 900000.0, 950000.0, 1000000.0, 1100000.0, 1200000.0, 1300000.0, 1400000.0, 1500000.0,
    1600000.0, 1700000.0, 1800000.0, 1900000.0, 2000000.0, 2200000.0, 2400000.0, 2600000.0,
    2800000.0, 3000000.0, 3200000.0, 3400000.0, 3600000.0, 3800000.0, 4000000.0, 4200000.0,
    4400000.0, 4600000.0, 4800000.0, 5000000.0, 10000000.0, 20000000.0, 30000000.0, 40000000.0,
    50000000.0
];

pub const YAXIS_BUCKETS: [Opts; DEATH] = convert_to_float_opts![
    10000000.0,
    20000000.0,
    40000000.0,
    60000000.0,
    80000000.0,
    100000000.0,
    120000000.0,
    140000000.0,
    160000000.0,
    180000000.0,
    200000000.0,
    220000000.0,
    240000000.0,
    260000000.0,
    280000000.0,
    300000000.0,
    320000000.0,
    340000000.0,
    360000000.0,
    380000000.0,
    400000000.0,
    420000000.0,
    440000000.0,
    460000000.0,
    480000000.0,
    500000000.0,
    520000000.0,
    540000000.0,
    560000000.0,
    580000000.0,
    600000000.0,
    620000000.0,
    640000000.0,
    660000000.0,
    680000000.0,
    700000000.0,
    720000000.0,
    740000000.0,
    760000000.0,
    780000000.0,
    800000000.0,
    820000000.0,
    840000000.0,
    860000000.0,
    880000000.0,
    900000000.0,
    920000000.0,
    940000000.0,
    960000000.0,
    980000000.0,
    1000000000.0,
    1020000000.0,
    1040000000.0,
    1060000000.0,
    1080000000.0,
    1100000000.0,
    1120000000.0,
    1140000000.0,
    1160000000.0,
    1180000000.0,
    1200000000.0,
    1220000000.0,
    1240000000.0,
    1260000000.0,
    1280000000.0,
    1300000000.0,
    1320000000.0,
    1340000000.0,
    1360000000.0,
    1380000000.0,
    1400000000.0,
    1420000000.0,
    1440000000.0,
    1460000000.0,
    1480000000.0,
    1500000000.0,
    1520000000.0,
    1540000000.0,
    1560000000.0,
    1580000000.0,
    1600000000.0,
    1620000000.0,
    1640000000.0,
    1660000000.0,
    1680000000.0,
    1700000000.0,
    1720000000.0,
    1740000000.0,
    1760000000.0,
    1780000000.0,
    1800000000.0,
    1820000000.0,
    1840000000.0,
    1860000000.0,
    1880000000.0,
    1900000000.0,
    1920000000.0,
    1940000000.0,
    1960000000.0,
    1980000000.0
];
